# Workflow for building and deploying a Hugo site
name: Deploy staging website

on:
  # Runs on pushes targeting the default branch
  push:
    branches: 
      - staging

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

## Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
## However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: stage-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      version_id: ${{ steps.vid.outputs.version_id }}
    env:
      TZ: "Asia/Tokyo"
    steps:
      - name: Set version_id
        id: vid
        run: |
          version_id=$(date "+%Y%m%d%H%M%S")
          echo "version_id=$version_id"
          echo "version_id=$version_id" >> $GITHUB_OUTPUT
      - name: Echo settings
        run: |
          echo "github.workflow: ${{ github.workflow }}"
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.base_ref: ${{ github.base_ref }}"
          echo "github.head_ref: ${{ github.head_ref }}"

  # Build job
  build:
    runs-on: ubuntu-latest
    environment: staging
    needs: info
    env:
      HUGO_VERSION: 0.138.0
    permissions:
      contents: write
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Echo version id and rename public to version_id
        run: |
          echo ${{ needs.info.outputs.version_id }}
          mv public ${{ needs.info.outputs.version_id }}
      - name: Upload files via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SERVER_KEY }}
          source: "./${{ needs.info.outputs.version_id }}"
          target: "sources/"
      - name: Create releaase tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: staging/${{ needs.info.outputs.version_id }}
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.RELEASE_TAG }}
          git push origin ${{ env.RELEASE_TAG }}

  # Deployment job for staging
  deploy:
    runs-on: ubuntu-latest
    environment: staging
    needs: [info, build]
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: fail
      - name: Deploy staging site
        run: ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} './deploy_stage.sh ${{ needs.info.outputs.version_id }}'

  # Create PR for production release
  create_pr:
    runs-on: ubuntu-latest
    environment: staging
    needs: [info, build, deploy]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Create PR for production deploy
        uses: peter-evans/create-pull-request@v7
        with:
          title: '[本番リリース] ${{ needs.info.outputs.version_id }}'
          body: |
            本番環境へのリリース - ${{ needs.info.outputs.version_id }}
#        run: |
#          git config --local user.name "github-actions[bot]"
#          git config --local user.email "github-actions[bot]@users.noreply.github.com"
#          gh pr create -B main -H stage -t "[本番リリース] ${{ needs.info.outputs.version_id }}" -b "本番環境へのリリース - ${{ needs.info.outputs.version_id }}"